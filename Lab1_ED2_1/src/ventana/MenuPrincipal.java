/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventana;

import clases.Persona;
import estructuras.arbolB.ArbolB;
import estructuras.linkedlist.LinkedList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.stream.Collectors;
//librerías de json
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.FileWriter;
import java.io.PrintWriter;

/**
 *
 * @author megan
 */
public class MenuPrincipal extends javax.swing.JFrame {

    ArbolB<Persona> arbolPersonas;

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        initComponents();
    }

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal(ArbolB<Persona> arbolPersonas) {
        initComponents();
        this.arbolPersonas = arbolPersonas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cargar archivo de clientes"));

        jButton1.setText("Ir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Cargar archivo: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar cliente"));

        jButton2.setText("Ir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Buscar persona:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Bienvenido a Talent Hub");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Exportar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //boton para cargar el archivo
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser accion = null;     // declarar variable de escogedor de archivos.
        File archivo = null;            // Variable de tipo File, o sea que es la variable que guarda la información del archivo seleccionado.
        accion = new JFileChooser("./"); // declarar un objeto de escogedor de archivos, que se va a abrir en la ruta ("./").
        // Nota: recordar que ("./") se refiere a la dirección donde estoy ejecutando mi programa
        accion.setFileSelectionMode(0); //que se va a eligir un archivo.
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("CSV", "csv"); //creamos filtro
        accion.setFileFilter(filtro); //aplicamos filtro
        accion.setDialogTitle("Abrir archivo"); // Titulo de la ventana de selección de archivos

        if (accion.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { //caso en que escogimos archivos.
            archivo = accion.getSelectedFile(); //archivo va a ser igual al archivo que escogimos
            System.out.println(accion.getSelectedFile().toString()); //Imprimir ruta de mi archivo
            try {
                /*Si existe el fichero*/
                if (archivo.exists()) {
                    FileReader lectura = new FileReader(archivo);
                    String texto = "", linea = "";
                    BufferedReader br = new BufferedReader(lectura);
                    String[] accion_archivo;
                    while ((linea = br.readLine()) != null) {

                        accion_archivo = linea.split(";"); // separar el archivo de texto
                        accion_archivo[1] = "[" + accion_archivo[1] + "]"; //contruyendo json
                        JsonParser parser = new JsonParser();
                        JsonArray gsonArr = parser.parse(accion_archivo[1]).getAsJsonArray(); //obteniendo el array de json
                        Persona persona = new Persona(0, "", "", "");
                        for (JsonElement obj : gsonArr) {            //para elemento del jsonArray

                            //extraer el objeto del array, o castear
                            JsonObject gsonObject = obj.getAsJsonObject();
                            String name = gsonObject.get("name").getAsString();
                            long dpi = gsonObject.get("dpi").getAsLong();
                            String datebirth = gsonObject.get("datebirth").getAsString();
                            String address = gsonObject.get("address").getAsString();
                            persona = new Persona(dpi, name, datebirth, address);
                        }

                        if (accion_archivo[0].equals("INSERT")) {
                            arbolPersonas.insertarEnArbol(persona);
                        } else if (accion_archivo[0].equals("PATCH")) {
                            patch(persona.getdpi(), persona.getNombre(), persona.getFecha(), persona.getDireccion());
                        } else if (accion_archivo[0].equals("DELETE")) {
                            delete(persona.getdpi(), persona.getNombre());
                        }
                    }
                    System.out.println("");
                } else {
                    System.out.println("Fichero No Existe");
                }
            } catch (Exception ex) {
                /*Captura un posible error y le imprime en pantalla*/
                System.out.println(ex.getMessage());
            }
        } else { // caso en que no escogimos archivo.
            System.out.println("No se selecciono fichero");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    //boton buscar
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String nombre_Buscar = jTextField1.getText();
        Persona persona_Buscar = new Persona(0, nombre_Buscar, "", "");
        LinkedList lista_buscada = arbolPersonas.getValorNodoB_by_Name(persona_Buscar);
        String listado = "";
        for (int i = 0; i < lista_buscada.getlength(); i++) {
            Persona persona2 = (Persona) lista_buscada.getNode(i).getValor();
            if (persona_Buscar.getNombre().equals(persona2.getNombre())) {
                System.out.println("" + persona2.toString());
                listado += persona2.toString() + '\n';
                jTextArea1.setText(listado);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //boton de exportar archivo jsonl
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String nombre_Buscar = jTextField1.getText();
        Persona persona_Buscar = new Persona(0, nombre_Buscar, "", "");
        LinkedList lista_buscada = arbolPersonas.getValorNodoB_by_Name(persona_Buscar);
        String listado = "";
        for (int i = 0; i < lista_buscada.getlength(); i++) {
            Persona persona2 = (Persona) lista_buscada.getNode(i).getValor();
            if (persona_Buscar.getNombre().equals(persona2.getNombre())) {
                System.out.println("" + persona2.toString());
                listado += persona2.toString() + '\n';
            }

        }

        FileWriter fichero = null;
        PrintWriter pw = null;
        //Parte de la creación de un fichero
        try {
            fichero = new FileWriter("." + "/" + nombre_Buscar + ".JSONL");
            pw = new PrintWriter(fichero);
            pw.println(listado);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Nuevamente aprovechamos el finally para
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    /**
     *
     * @param dpiBuscar por medio de este parametro
     * @param nameBuscar
     * @param dateModificar
     * @param addressModificar
     */
    public void patch(long dpiBuscar, String nameBuscar, String dateModificar, String addressModificar) {
        Persona persona_Modificar = new Persona(dpiBuscar, nameBuscar, "", "");
        LinkedList lista_buscada_modificar = arbolPersonas.getValorNodoB_by_Name(persona_Modificar);
        String listado = "";
        for (int i = 0; i < lista_buscada_modificar.getlength(); i++) {
            Persona persona2 = (Persona) lista_buscada_modificar.getNode(i).getValor();
            if (persona_Modificar.getNombre().equals(persona2.getNombre()) && persona_Modificar.getdpi() == persona2.getdpi()) {
                System.out.println("" + persona2.toString());
                persona2.setFecha(dateModificar);
                persona2.setDireccion(addressModificar);
                System.out.println("" + persona2.toString());
            }
        }
    }

    public void delete(long dpiEliminar, String nombreELiminar) {
        Persona persona_Eliminar = new Persona(dpiEliminar, nombreELiminar, "", "");
        LinkedList lista_buscada_eliminar = arbolPersonas.getValorNodoB_by_Name(persona_Eliminar);
        String listado = "";
        for (int i = 0; i < lista_buscada_eliminar.getlength(); i++) {
            Persona persona2 = (Persona) lista_buscada_eliminar.getNode(i).getValor();
            if (persona_Eliminar.getNombre().equals(persona2.getNombre()) && persona_Eliminar.getdpi() == persona2.getdpi()) {
                System.out.println("" + persona2.toString());
                arbolPersonas.eliminarEnArbol(persona2);
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
